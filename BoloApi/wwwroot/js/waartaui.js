"use strict"; function _defineProperty(e, t, a) { return t in e ? Object.defineProperty(e, t, { value: a, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = a, e } class UserInfo { constructor() { _defineProperty(this, "memberID", void 0), _defineProperty(this, "connectionID", void 0), _defineProperty(this, "name", void 0), _defineProperty(this, "lastpulse", void 0), _defineProperty(this, "videoCapable", void 0), _defineProperty(this, "peerCapable", void 0), _defineProperty(this, "stream", void 0), _defineProperty(this, "pic", void 0), this.memberID = "00000000-0000-0000-0000-000000000000", this.connectionID = "", this.name = "", this.lastpulse = Date.now(), this.videoCapable = !0, this.peerCapable = !0, this.stream = null, this.pic = "" } isAlive() { var e = new Date(this.lastpulse); return e.setSeconds(e.getSeconds() + 10), !(e < Date.now()) } } var MessageEnum = { Text: 1, MemberAdd: 2, MemberLeave: 3 }; class MessageInfo { constructor() { _defineProperty(this, "sender", void 0), _defineProperty(this, "timeStamp", void 0), _defineProperty(this, "type", void 0), _defineProperty(this, "text", void 0) } } class HeartBeat extends React.Component { constructor(e) { super(e); let t = !0; null === localStorage.getItem("token") && (t = !1), this.state = { loading: !1, loggedin: t, token: null == localStorage.getItem("token") ? "" : localStorage.getItem("token"), activity: void 0 === this.props.activity ? 1 : this.props.activity, interval: void 0 === this.props.interval ? 3e3 : this.props.interval }, this.pulseinterval = null, this.sendHeartbeat = this.sendHeartbeat.bind(this) } componentDidMount() { this.sendHeartbeat(), null === this.pulseinterval && (this.pulseinterval = setInterval(this.sendHeartbeat, this.state.interval)) } componentWillUnmount() { null !== this.pulseinterval && clearInterval(this.pulseinterval) } sendHeartbeat() { this.state.loggedin && (this.setState({ loading: !0 }), fetch("//" + window.location.host + "/api/Members/savepulse?s=" + this.state.activity, { method: "get", headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { this.setState({ loading: !1 }) })) } render() { return null } } class NavMenu extends React.Component { constructor(e) { super(e); const t = localStorage.getItem("token"); let a = !0; null == localStorage.getItem("token") && (a = !1), this.toggleNavbar = this.toggleNavbar.bind(this), this.state = { loggedin: a, collapsed: !0, registermodal: void 0 !== this.props.register && this.props.register, showinvite: void 0 !== this.props.onInvite, showleavemeeting: void 0 !== this.props.onLeaveMeeting, onProfileChange: void 0 === this.props.onProfileChange ? null : this.props.onProfileChange, registerFormBeginWith: void 0 === this.props.registerFormBeginWith || this.props.registerFormBeginWith, membername: "", memberid: "", fixed: void 0 === this.props.fixed || this.props.fixed, showprofilemodal: !1 }, null !== t && this.fetchData(t), this.loginHandler = this.loginHandler.bind(this), this.handleRegister = this.handleRegister.bind(this), this.handleLogin = this.handleLogin.bind(this), this.handleOnInvite = this.handleOnInvite.bind(this), this.closeRegisterModal = this.closeRegisterModal.bind(this), this.handleLeaveMeeting = this.handleLeaveMeeting.bind(this), this.toggleProfileModal = this.toggleProfileModal.bind(this), this.handleProfileChange = this.handleProfileChange.bind(this) } loginHandler() { null != localStorage.getItem("token") && (this.fetchData(localStorage.getItem("token")), this.setState({ loggedin: !0, registermodal: !1, registerFormBeginWith: !1 }), void 0 !== this.props.onLogin && this.props.onLogin()) } handleProfileChange() { null !== this.state.onProfileChange && this.state.onProfileChange(), null !== localStorage.getItem("token") && this.fetchData(localStorage.getItem("token")) } handleOnInvite(e) { void 0 !== this.props.onInvite && this.props.onInvite() } handleLeaveMeeting(e) { void 0 !== this.props.onLeaveMeeting && this.props.onLeaveMeeting() } handleRegister(e) { e.preventDefault(), this.setState({ registermodal: !0, registerFormBeginWith: !0 }) } handleLogin(e) { e.preventDefault(), this.setState({ registermodal: !0, registerFormBeginWith: !1 }) } handleLogout(e) { e.preventDefault(), localStorage.removeItem("token"), location.reload() } toggleProfileModal() { this.setState({ showprofilemodal: !this.state.showprofilemodal }) } closeRegisterModal() { this.setState({ registermodal: !1 }) } fetchData(e) { fetch("//" + window.location.host + "/api/Members/Validate", { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ bsstyle: "danger", message: "Authorization has been denied for this request.", loggedin: !1, loading: !1 })) : 200 === e.status && e.json().then(e => { this.setState({ bsstyle: "", message: "", loggedin: !0, loading: !1, membername: e.name, memberid: e.id, memberpic: e.pic }) }) }) } toggleNavbar() { this.setState({ collapsed: !this.state.collapsed }) } static getDerivedStateFromProps(e, t) { return e.register !== t.register ? { registermodal: e.register } : null } renderRegisterModal() { return this.state.registermodal ? React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("button", { type: "button", className: "close pull-right", "data-dismiss": "modal", "aria-label": "Close", onClick: this.closeRegisterModal }, React.createElement("span", { "aria-hidden": "true" }, "×")), React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: this.state.registerFormBeginWith }))))) : null } renderProfileModal() { return this.state.showprofilemodal ? React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-scrollable modal-lg" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Profile"), React.createElement("button", { type: "button", className: "close", "data-dismiss": "modal", "aria-label": "Close", onClick: this.toggleProfileModal }, React.createElement("span", { "aria-hidden": "true" }, "×"))), React.createElement("div", { className: "modal-body" }, React.createElement(ManageProfile, { onProfileChange: this.handleProfileChange }))))) : null } render() { const e = localStorage.getItem("token"); let t = [], a = !0, n = "navbar navbar-expand-lg navbar-dark bg-dark " + (this.state.fixed ? "fixed-top" : ""); null === e && (a = !1), this.state.showinvite && t.push(React.createElement("li", { className: "nav-item", key: "showinviteli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light bg-info mr-2 ml-2 nav-link", onClick: this.handleOnInvite }, "Invite ", React.createElement("img", { src: "/icons/plus-circle.svg", alt: "", width: "24", height: "24", title: "Invite" })))), this.state.showleavemeeting && t.push(React.createElement("li", { className: "nav-item", key: "showleavemeetingli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light bg-danger mr-2 ml-2 nav-link", onClick: this.handleLeaveMeeting }, "Leave ", React.createElement("img", { src: "/icons/user-minus.svg", alt: "", width: "24", height: "24", title: "Leave Meeting" })))); let i = null; return a && "" !== this.state.memberpic && (i = React.createElement("img", { src: this.state.memberpic, width: "20", height: "20", className: "rounded border" })), a ? (t.push(React.createElement("li", { className: "nav-item", key: "memberlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link membernavlink", onClick: this.toggleProfileModal }, i, " ", this.state.membername))), t.push(React.createElement("li", { className: "nav-item", key: "logoutlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link", onClick: this.handleLogout }, "Logout")))) : (t.push(React.createElement("li", { className: "nav-item", key: "loginlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link", onClick: this.handleLogin }, "Login"))), t.push(React.createElement("li", { className: "nav-item", key: "registerlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link", onClick: this.handleRegister }, "Register")))), React.createElement(React.Fragment, null, React.createElement("header", null, React.createElement("nav", { className: n }, React.createElement("div", { className: "container-fluid" }, React.createElement("a", { className: "navbar-brand", href: "#" }, "Waarta"), React.createElement("button", { className: "navbar-toggler", type: "button", "data-toggle": "collapse", "data-target": "#navbarSupportedContent", "aria-controls": "navbarSupportedContent", "aria-expanded": "false", "aria-label": "Toggle navigation" }, React.createElement("span", { className: "navbar-toggler-icon" })), React.createElement("div", { className: "collapse navbar-collapse d-sm-inline-flex flex-sm-row-reverse" }, React.createElement("ul", { className: "navbar-nav flex-grow" }, React.createElement("li", { className: "nav-item" }, React.createElement("a", { className: "nav-link text-light", href: "/" }, "Home")), React.createElement("li", { className: "nav-item" }, React.createElement("a", { className: "nav-link text-light", href: "/Meetings" }, "Meetings")), t))))), this.renderProfileModal(), this.renderRegisterModal()) } } _defineProperty(NavMenu, "displayName", NavMenu.name); class ManageProfile extends React.Component { constructor(e) { super(e), _defineProperty(this, "handleFile", e => { const t = new FileReader; t.onloadend = (() => { this.setState({ src: t.result }) }), t.readAsDataURL(e.target.files[0]) }), _defineProperty(this, "onImageLoaded", e => { this.imageRef = e }), _defineProperty(this, "onCropChange", e => { this.setState({ crop: e }) }), _defineProperty(this, "onCropComplete", e => { if (this.imageRef && e.width && e.height) { const t = this.getCroppedImg(this.imageRef, e); this.setState({ croppedImageUrl: t }) } }); let t = !0; null === localStorage.getItem("token") && (t = !1), this.state = { loading: !1, loggedin: t, myself: null, bsstyle: "", message: "", token: null == localStorage.getItem("token") ? "" : localStorage.getItem("token"), onProfileChange: void 0 === this.props.onProfileChange ? null : this.props.onProfileChange, showProfilePicModal: !1, src: null, crop: { unit: "px", x: 20, y: 20, width: 200, height: 200 }, croppedImageUrl: null }, this.handleChange = this.handleChange.bind(this), this.saveData = this.saveData.bind(this), this.toggleProfilePicModal = this.toggleProfilePicModal.bind(this), this.saveProfilePic = this.saveProfilePic.bind(this), this.removeProfilePicture = this.removeProfilePicture.bind(this) } componentDidMount() { null !== localStorage.getItem("token") && this.validate(localStorage.getItem("token")) } handleChange(e) { let t = this.state.myself; switch (e.target.name) { case "bio": t.bio = e.target.value; break; case "name": "" === e.target.value.trim() ? (alert("Name is required."), e.target.focus()) : t.name = e.target.value; break; case "birthYear": t.birthYear = e.target.value; break; case "gender": t.gender = e.target.value; break; case "visibility": t.visibility = e.target.value; break; case "country": t.country = e.target.value; break; case "state": t.state = e.target.value; break; case "city": t.city = e.target.value }this.setState({ myself: t }) } toggleProfilePicModal() { this.setState({ showProfilePicModal: !this.state.showProfilePicModal }) } removeProfilePicture(e) { this.setState({ loading: !0 }); const t = new FormData; t.set("pic", ""), fetch("//" + window.location.host + "/api/Members/savepic", { method: "post", body: t, headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status ? (this.setState({ loading: !1, showProfilePicModal: !1 }), null !== localStorage.getItem("token") && this.validate(localStorage.getItem("token")), null !== this.state.onProfileChange && this.state.onProfileChange()) : this.setState({ loading: !1, message: "Unable to save profile pic", bsstyle: "danger" }) }) } saveProfilePic() { if (null !== this.state.croppedImageUrl) { this.setState({ loading: !0 }); const e = new FormData; e.set("pic", this.state.croppedImageUrl), fetch("//" + window.location.host + "/api/Members/savepic", { method: "post", body: e, headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status ? (this.setState({ loading: !1, showProfilePicModal: !1 }), null !== localStorage.getItem("token") && this.validate(localStorage.getItem("token")), null !== this.state.onProfileChange && this.state.onProfileChange()) : this.setState({ loading: !1, message: "Unable to save profile pic", bsstyle: "danger" }) }) } } saveData(e) { let t = e.target.name, a = e.target.value; if (this.setState({ loading: !0 }), "bio" !== t) fetch("//" + window.location.host + "/api/Members/Save" + t + "?d=" + a, { method: "get", headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status ? (this.setState({ loading: !1 }), null !== localStorage.getItem("token") && this.validate(localStorage.getItem("token")), null !== this.state.onProfileChange && this.state.onProfileChange()) : this.setState({ loading: !1, message: "Unable to save data", bsstyle: "danger" }) }); else { const e = new FormData; e.set("d", a), fetch("//" + window.location.host + "/api/Members/savebio", { method: "post", body: e, headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status ? (this.setState({ loading: !1 }), null !== this.state.onProfileChange && this.state.onProfileChange()) : this.setState({ loading: !1, message: "Unable to save data", bsstyle: "danger" }) }) } } validate(e) { this.setState({ loading: !0 }), fetch("//" + window.location.host + "/api/Members/Validate", { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status && e.json().then(e => { console.log(e), this.setState({ loggedin: !0, loading: !1, myself: e }) }) }) } getCroppedImg(e, t) { const a = document.createElement("canvas"), n = e.naturalWidth / e.width, i = e.naturalHeight / e.height; return a.width = t.width, a.height = t.height, a.getContext("2d").drawImage(e, t.x * n, t.y * i, t.width * n, t.height * i, 0, 0, t.width, t.height), a.toDataURL() } renderUSStates() { return React.createElement("select", { name: "state", id: "state", className: "form-control", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "" }), React.createElement("option", { value: "Alabama" }, "Alabama"), React.createElement("option", { value: "Alaska" }, "Alaska"), React.createElement("option", { value: "Arizona" }, "Arizona"), React.createElement("option", { value: "Arkansas" }, "Arkansas"), React.createElement("option", { value: "California" }, "California"), React.createElement("option", { value: "Colorado" }, "Colorado"), React.createElement("option", { value: "Connecticut" }, "Connecticut"), React.createElement("option", { value: "Delaware" }, "Delaware"), React.createElement("option", { value: "District of Columbia" }, "District of Columbia"), React.createElement("option", { value: "Florida" }, "Florida"), React.createElement("option", { value: "Georgia" }, "Georgia"), React.createElement("option", { value: "Guam" }, "Guam"), React.createElement("option", { value: "Hawaii" }, "Hawaii"), React.createElement("option", { value: "Idaho" }, "Idaho"), React.createElement("option", { value: "Illinois" }, "Illinois"), React.createElement("option", { value: "Indiana" }, "Indiana"), React.createElement("option", { value: "Iowa" }, "Iowa"), React.createElement("option", { value: "Kansas" }, "Kansas"), React.createElement("option", { value: "Kentucky" }, "Kentucky"), React.createElement("option", { value: "Louisiana" }, "Louisiana"), React.createElement("option", { value: "Maine" }, "Maine"), React.createElement("option", { value: "Maryland" }, "Maryland"), React.createElement("option", { value: "Massachusetts" }, "Massachusetts"), React.createElement("option", { value: "Michigan" }, "Michigan"), React.createElement("option", { value: "Minnesota" }, "Minnesota"), React.createElement("option", { value: "Mississippi" }, "Mississippi"), React.createElement("option", { value: "Missouri" }, "Missouri"), React.createElement("option", { value: "Montana" }, "Montana"), React.createElement("option", { value: "Nebraska" }, "Nebraska"), React.createElement("option", { value: "Nevada" }, "Nevada"), React.createElement("option", { value: "New Hampshire" }, "New Hampshire"), React.createElement("option", { value: "New Jersey" }, "New Jersey"), React.createElement("option", { value: "New Mexico" }, "New Mexico"), React.createElement("option", { value: "New York" }, "New York"), React.createElement("option", { value: "North Carolina" }, "North Carolina"), React.createElement("option", { value: "North Dakota" }, "North Dakota"), React.createElement("option", { value: "Northern Marianas Islands" }, "Northern Marianas Islands"), React.createElement("option", { value: "Ohio" }, "Ohio"), React.createElement("option", { value: "Oklahoma" }, "Oklahoma"), React.createElement("option", { value: "Oregon" }, "Oregon"), React.createElement("option", { value: "Pennsylvania" }, "Pennsylvania"), React.createElement("option", { value: "Puerto Rico" }, "Puerto Rico"), React.createElement("option", { value: "Rhode Island" }, "Rhode Island"), React.createElement("option", { value: "South Carolina" }, "South Carolina"), React.createElement("option", { value: "South Dakota" }, "South Dakota"), React.createElement("option", { value: "Tennessee" }, "Tennessee"), React.createElement("option", { value: "Texas" }, "Texas"), React.createElement("option", { value: "Utah" }, "Utah"), React.createElement("option", { value: "Vermont" }, "Vermont"), React.createElement("option", { value: "Virginia" }, "Virginia"), React.createElement("option", { value: "Virgin Islands" }, "Virgin Islands"), React.createElement("option", { value: "Washington" }, "Washington"), React.createElement("option", { value: "West Virginia" }, "West Virginia"), React.createElement("option", { value: "Wisconsin" }, "Wisconsin"), React.createElement("option", { value: "Wyoming" }, "Wyoming")) } renderIndianStates() { return React.createElement("select", { name: "state", id: "state", className: "form-control", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "Andhra Pradesh" }, "Andhra Pradesh"), React.createElement("option", { value: "Andaman and Nicobar Islands" }, "Andaman and Nicobar Islands"), React.createElement("option", { value: "Arunachal Pradesh" }, "Arunachal Pradesh"), React.createElement("option", { value: "Assam" }, "Assam"), React.createElement("option", { value: "Bihar" }, "Bihar"), React.createElement("option", { value: "Chandigarh" }, "Chandigarh"), React.createElement("option", { value: "Chhattisgarh" }, "Chhattisgarh"), React.createElement("option", { value: "Dadar and Nagar Haveli" }, "Dadar and Nagar Haveli"), React.createElement("option", { value: "Daman and Diu" }, "Daman and Diu"), React.createElement("option", { value: "Delhi" }, "Delhi"), React.createElement("option", { value: "Lakshadweep" }, "Lakshadweep"), React.createElement("option", { value: "Puducherry" }, "Puducherry"), React.createElement("option", { value: "Goa" }, "Goa"), React.createElement("option", { value: "Gujarat" }, "Gujarat"), React.createElement("option", { value: "Haryana" }, "Haryana"), React.createElement("option", { value: "Himachal Pradesh" }, "Himachal Pradesh"), React.createElement("option", { value: "Jammu and Kashmir" }, "Jammu and Kashmir"), React.createElement("option", { value: "Jharkhand" }, "Jharkhand"), React.createElement("option", { value: "Karnataka" }, "Karnataka"), React.createElement("option", { value: "Kerala" }, "Kerala"), React.createElement("option", { value: "Madhya Pradesh" }, "Madhya Pradesh"), React.createElement("option", { value: "Maharashtra" }, "Maharashtra"), React.createElement("option", { value: "Manipur" }, "Manipur"), React.createElement("option", { value: "Meghalaya" }, "Meghalaya"), React.createElement("option", { value: "Mizoram" }, "Mizoram"), React.createElement("option", { value: "Nagaland" }, "Nagaland"), React.createElement("option", { value: "Odisha" }, "Odisha"), React.createElement("option", { value: "Punjab" }, "Punjab"), React.createElement("option", { value: "Rajasthan" }, "Rajasthan"), React.createElement("option", { value: "Sikkim" }, "Sikkim"), React.createElement("option", { value: "Tamil Nadu" }, "Tamil Nadu"), React.createElement("option", { value: "Telangana" }, "Telangana"), React.createElement("option", { value: "Tripura" }, "Tripura"), React.createElement("option", { value: "Uttar Pradesh" }, "Uttar Pradesh"), React.createElement("option", { value: "Uttarakhand" }, "Uttarakhand"), React.createElement("option", { value: "West Bengal" }, "West Bengal")) } renderStates() { return "india" == this.state.myself.country.toLowerCase() ? this.renderIndianStates() : "usa" == this.state.myself.country.toLowerCase() ? this.renderUSStates() : React.createElement("input", { type: "text", name: "state", className: "form-control", maxLength: "100", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }) } renderProfilePicModal() { if (this.state.showProfilePicModal) { const { crop: e, profile_pic: t, src: a } = this.state; return React.createElement("div", { className: "modal  d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog  modal-dialog-scrollable modal-lg" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Profile Picture"), React.createElement("button", { type: "button", className: "close", "data-dismiss": "modal", "aria-label": "Close", onClick: this.toggleProfilePicModal }, React.createElement("span", { "aria-hidden": "true" }, "×"))), React.createElement("div", { className: "modal-body" }, React.createElement("div", { className: "custom-file" }, React.createElement("input", { type: "file", className: "custom-file-input", id: "profile_pic", value: t, onChange: this.handleFile }), React.createElement("label", { className: "custom-file-label", htmlFor: "profile_pic" }, "Choose Picture")), a && React.createElement(ReactCrop.Component, { src: a, crop: e, locked: "true", onImageLoaded: this.onImageLoaded, onComplete: this.onCropComplete, onChange: this.onCropChange })), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this.saveProfilePic }, "Save"))))) } return null } render() { if (this.state.loggedin && null !== this.state.myself) { let e = this.state.loading ? React.createElement("div", { className: "progress" }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "100", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%", height: "5px" } })) : null, t = "" !== this.state.myself.pic ? React.createElement(React.Fragment, null, React.createElement("img", { src: this.state.myself.pic, className: "rounded mx-auto d-block img-fluid", alt: "" }), React.createElement("button", { type: "button", className: "btn btn-sm btn-light m-1", onClick: this.removeProfilePicture }, "Remove Picture")) : React.createElement("img", { src: "/images/nopic.jpg", className: "rounded mx-auto d-block img-fluid", alt: "" }); return React.createElement(React.Fragment, null, React.createElement("div", { className: "container-fluid" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-3 text-center" }, t, React.createElement("button", { type: "button", className: "btn btn-sm btn-light m-1", onClick: this.toggleProfilePicModal }, "Upload Picture"), this.renderProfilePicModal()), React.createElement("div", { className: "col-md-9" }, React.createElement("div", { className: "form-row" }, React.createElement("div", { className: "col-mg-12" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "biotxt" }, "About Me"), React.createElement("textarea", { className: "form-control", id: "biotxt", maxLength: "950", name: "bio", value: this.state.myself.bio, onChange: this.handleChange, onBlur: this.saveData, rows: "3", placeholder: "Write something about yourself." }), React.createElement("small", { className: "form-text text-muted" }, "Optional, but recommended. Use this space to describe yourself. Your interests,  profession, hobbies etc. It's your space use it well.")))), React.createElement("div", { className: "form-row" }, React.createElement("div", { className: "col-md-4" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "nametxt" }, "Name"), React.createElement("input", { type: "text", id: "nametxt", name: "name", placeholder: "Your Name", className: "form-control", value: this.state.myself.name, onChange: this.handleChange, onBlur: this.saveData }))), React.createElement("div", { className: "col-md-4" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "birthyeartxt" }, "Year of Birth"), React.createElement("input", { type: "number", id: "birthyeartxt", name: "birthYear", className: "form-control", value: this.state.myself.birthYear, onChange: this.handleChange, onBlur: this.saveData }), React.createElement("small", { className: "form-text text-muted" }, "Optional, but recommended."))), React.createElement("div", { className: "col-md-4" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "genderselect" }, "Gender"), React.createElement("select", { className: "custom-select", id: "genderselect", name: "gender", value: this.state.myself.gender, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "0" }), React.createElement("option", { value: "1" }, "Male"), React.createElement("option", { value: "2" }, "Female"), React.createElement("option", { value: "3" }, "Other"))))), React.createElement("div", { className: "form-row" }, React.createElement("div", { className: "col-md-4" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "countryselect" }, "Country"), React.createElement("select", { className: "custom-select", id: "countryselect", name: "country", value: this.state.myself.country, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "" }), React.createElement("option", { value: "Afganistan" }, "Afghanistan"), React.createElement("option", { value: "Albania" }, "Albania"), React.createElement("option", { value: "Algeria" }, "Algeria"), React.createElement("option", { value: "American Samoa" }, "American Samoa"), React.createElement("option", { value: "Andorra" }, "Andorra"), React.createElement("option", { value: "Angola" }, "Angola"), React.createElement("option", { value: "Anguilla" }, "Anguilla"), React.createElement("option", { value: "Antigua & Barbuda" }, "Antigua & Barbuda"), React.createElement("option", { value: "Argentina" }, "Argentina"), React.createElement("option", { value: "Armenia" }, "Armenia"), React.createElement("option", { value: "Aruba" }, "Aruba"), React.createElement("option", { value: "Australia" }, "Australia"), React.createElement("option", { value: "Austria" }, "Austria"), React.createElement("option", { value: "Azerbaijan" }, "Azerbaijan"), React.createElement("option", { value: "Bahamas" }, "Bahamas"), React.createElement("option", { value: "Bahrain" }, "Bahrain"), React.createElement("option", { value: "Bangladesh" }, "Bangladesh"), React.createElement("option", { value: "Barbados" }, "Barbados"), React.createElement("option", { value: "Belarus" }, "Belarus"), React.createElement("option", { value: "Belgium" }, "Belgium"), React.createElement("option", { value: "Belize" }, "Belize"), React.createElement("option", { value: "Benin" }, "Benin"), React.createElement("option", { value: "Bermuda" }, "Bermuda"), React.createElement("option", { value: "Bhutan" }, "Bhutan"), React.createElement("option", { value: "Bolivia" }, "Bolivia"), React.createElement("option", { value: "Bonaire" }, "Bonaire"), React.createElement("option", { value: "Bosnia & Herzegovina" }, "Bosnia & Herzegovina"), React.createElement("option", { value: "Botswana" }, "Botswana"), React.createElement("option", { value: "Brazil" }, "Brazil"), React.createElement("option", { value: "British Indian Ocean Ter" }, "British Indian Ocean Ter"), React.createElement("option", { value: "Brunei" }, "Brunei"), React.createElement("option", { value: "Bulgaria" }, "Bulgaria"), React.createElement("option", { value: "Burkina Faso" }, "Burkina Faso"), React.createElement("option", { value: "Burundi" }, "Burundi"), React.createElement("option", { value: "Cambodia" }, "Cambodia"), React.createElement("option", { value: "Cameroon" }, "Cameroon"), React.createElement("option", { value: "Canada" }, "Canada"), React.createElement("option", { value: "Canary Islands" }, "Canary Islands"), React.createElement("option", { value: "Cape Verde" }, "Cape Verde"), React.createElement("option", { value: "Cayman Islands" }, "Cayman Islands"), React.createElement("option", { value: "Central African Republic" }, "Central African Republic"), React.createElement("option", { value: "Chad" }, "Chad"), React.createElement("option", { value: "Channel Islands" }, "Channel Islands"), React.createElement("option", { value: "Chile" }, "Chile"), React.createElement("option", { value: "China" }, "China"), React.createElement("option", { value: "Christmas Island" }, "Christmas Island"), React.createElement("option", { value: "Cocos Island" }, "Cocos Island"), React.createElement("option", { value: "Colombia" }, "Colombia"), React.createElement("option", { value: "Comoros" }, "Comoros"), React.createElement("option", { value: "Congo" }, "Congo"), React.createElement("option", { value: "Cook Islands" }, "Cook Islands"), React.createElement("option", { value: "Costa Rica" }, "Costa Rica"), React.createElement("option", { value: "Cote DIvoire" }, "Cote DIvoire"), React.createElement("option", { value: "Croatia" }, "Croatia"), React.createElement("option", { value: "Cuba" }, "Cuba"), React.createElement("option", { value: "Curaco" }, "Curacao"), React.createElement("option", { value: "Cyprus" }, "Cyprus"), React.createElement("option", { value: "Czech Republic" }, "Czech Republic"), React.createElement("option", { value: "Denmark" }, "Denmark"), React.createElement("option", { value: "Djibouti" }, "Djibouti"), React.createElement("option", { value: "Dominica" }, "Dominica"), React.createElement("option", { value: "Dominican Republic" }, "Dominican Republic"), React.createElement("option", { value: "East Timor" }, "East Timor"), React.createElement("option", { value: "Ecuador" }, "Ecuador"), React.createElement("option", { value: "Egypt" }, "Egypt"), React.createElement("option", { value: "El Salvador" }, "El Salvador"), React.createElement("option", { value: "Equatorial Guinea" }, "Equatorial Guinea"), React.createElement("option", { value: "Eritrea" }, "Eritrea"), React.createElement("option", { value: "Estonia" }, "Estonia"), React.createElement("option", { value: "Ethiopia" }, "Ethiopia"), React.createElement("option", { value: "Falkland Islands" }, "Falkland Islands"), React.createElement("option", { value: "Faroe Islands" }, "Faroe Islands"), React.createElement("option", { value: "Fiji" }, "Fiji"), React.createElement("option", { value: "Finland" }, "Finland"), React.createElement("option", { value: "France" }, "France"), React.createElement("option", { value: "French Guiana" }, "French Guiana"), React.createElement("option", { value: "French Polynesia" }, "French Polynesia"), React.createElement("option", { value: "French Southern Ter" }, "French Southern Ter"), React.createElement("option", { value: "Gabon" }, "Gabon"), React.createElement("option", { value: "Gambia" }, "Gambia"), React.createElement("option", { value: "Georgia" }, "Georgia"), React.createElement("option", { value: "Germany" }, "Germany"), React.createElement("option", { value: "Ghana" }, "Ghana"), React.createElement("option", { value: "Gibraltar" }, "Gibraltar"), React.createElement("option", { value: "Great Britain" }, "Great Britain"), React.createElement("option", { value: "Greece" }, "Greece"), React.createElement("option", { value: "Greenland" }, "Greenland"), React.createElement("option", { value: "Grenada" }, "Grenada"), React.createElement("option", { value: "Guadeloupe" }, "Guadeloupe"), React.createElement("option", { value: "Guam" }, "Guam"), React.createElement("option", { value: "Guatemala" }, "Guatemala"), React.createElement("option", { value: "Guinea" }, "Guinea"), React.createElement("option", { value: "Guyana" }, "Guyana"), React.createElement("option", { value: "Haiti" }, "Haiti"), React.createElement("option", { value: "Hawaii" }, "Hawaii"), React.createElement("option", { value: "Honduras" }, "Honduras"), React.createElement("option", { value: "Hong Kong" }, "Hong Kong"), React.createElement("option", { value: "Hungary" }, "Hungary"), React.createElement("option", { value: "Iceland" }, "Iceland"), React.createElement("option", { value: "Indonesia" }, "Indonesia"), React.createElement("option", { value: "India" }, "India"), React.createElement("option", { value: "Iran" }, "Iran"), React.createElement("option", { value: "Iraq" }, "Iraq"), React.createElement("option", { value: "Ireland" }, "Ireland"), React.createElement("option", { value: "Isle of Man" }, "Isle of Man"), React.createElement("option", { value: "Israel" }, "Israel"), React.createElement("option", { value: "Italy" }, "Italy"), React.createElement("option", { value: "Jamaica" }, "Jamaica"), React.createElement("option", { value: "Japan" }, "Japan"), React.createElement("option", { value: "Jordan" }, "Jordan"), React.createElement("option", { value: "Kazakhstan" }, "Kazakhstan"), React.createElement("option", { value: "Kenya" }, "Kenya"), React.createElement("option", { value: "Kiribati" }, "Kiribati"), React.createElement("option", { value: "Korea North" }, "Korea North"), React.createElement("option", { value: "Korea Sout" }, "Korea South"), React.createElement("option", { value: "Kuwait" }, "Kuwait"), React.createElement("option", { value: "Kyrgyzstan" }, "Kyrgyzstan"), React.createElement("option", { value: "Laos" }, "Laos"), React.createElement("option", { value: "Latvia" }, "Latvia"), React.createElement("option", { value: "Lebanon" }, "Lebanon"), React.createElement("option", { value: "Lesotho" }, "Lesotho"), React.createElement("option", { value: "Liberia" }, "Liberia"), React.createElement("option", { value: "Libya" }, "Libya"), React.createElement("option", { value: "Liechtenstein" }, "Liechtenstein"), React.createElement("option", { value: "Lithuania" }, "Lithuania"), React.createElement("option", { value: "Luxembourg" }, "Luxembourg"), React.createElement("option", { value: "Macau" }, "Macau"), React.createElement("option", { value: "Macedonia" }, "Macedonia"), React.createElement("option", { value: "Madagascar" }, "Madagascar"), React.createElement("option", { value: "Malaysia" }, "Malaysia"), React.createElement("option", { value: "Malawi" }, "Malawi"), React.createElement("option", { value: "Maldives" }, "Maldives"), React.createElement("option", { value: "Mali" }, "Mali"), React.createElement("option", { value: "Malta" }, "Malta"), React.createElement("option", { value: "Marshall Islands" }, "Marshall Islands"), React.createElement("option", { value: "Martinique" }, "Martinique"), React.createElement("option", { value: "Mauritania" }, "Mauritania"), React.createElement("option", { value: "Mauritius" }, "Mauritius"), React.createElement("option", { value: "Mayotte" }, "Mayotte"), React.createElement("option", { value: "Mexico" }, "Mexico"), React.createElement("option", { value: "Midway Islands" }, "Midway Islands"), React.createElement("option", { value: "Moldova" }, "Moldova"), React.createElement("option", { value: "Monaco" }, "Monaco"), React.createElement("option", { value: "Mongolia" }, "Mongolia"), React.createElement("option", { value: "Montserrat" }, "Montserrat"), React.createElement("option", { value: "Morocco" }, "Morocco"), React.createElement("option", { value: "Mozambique" }, "Mozambique"), React.createElement("option", { value: "Myanmar" }, "Myanmar"), React.createElement("option", { value: "Nambia" }, "Nambia"), React.createElement("option", { value: "Nauru" }, "Nauru"), React.createElement("option", { value: "Nepal" }, "Nepal"), React.createElement("option", { value: "Netherland Antilles" }, "Netherland Antilles"), React.createElement("option", { value: "Netherlands" }, "Netherlands (Holland, Europe)"), React.createElement("option", { value: "Nevis" }, "Nevis"), React.createElement("option", { value: "New Caledonia" }, "New Caledonia"), React.createElement("option", { value: "New Zealand" }, "New Zealand"), React.createElement("option", { value: "Nicaragua" }, "Nicaragua"), React.createElement("option", { value: "Niger" }, "Niger"), React.createElement("option", { value: "Nigeria" }, "Nigeria"), React.createElement("option", { value: "Niue" }, "Niue"), React.createElement("option", { value: "Norfolk Island" }, "Norfolk Island"), React.createElement("option", { value: "Norway" }, "Norway"), React.createElement("option", { value: "Oman" }, "Oman"), React.createElement("option", { value: "Pakistan" }, "Pakistan"), React.createElement("option", { value: "Palau Island" }, "Palau Island"), React.createElement("option", { value: "Palestine" }, "Palestine"), React.createElement("option", { value: "Panama" }, "Panama"), React.createElement("option", { value: "Papua New Guinea" }, "Papua New Guinea"), React.createElement("option", { value: "Paraguay" }, "Paraguay"), React.createElement("option", { value: "Peru" }, "Peru"), React.createElement("option", { value: "Phillipines" }, "Philippines"), React.createElement("option", { value: "Pitcairn Island" }, "Pitcairn Island"), React.createElement("option", { value: "Poland" }, "Poland"), React.createElement("option", { value: "Portugal" }, "Portugal"), React.createElement("option", { value: "Puerto Rico" }, "Puerto Rico"), React.createElement("option", { value: "Qatar" }, "Qatar"), React.createElement("option", { value: "Republic of Montenegro" }, "Republic of Montenegro"), React.createElement("option", { value: "Republic of Serbia" }, "Republic of Serbia"), React.createElement("option", { value: "Reunion" }, "Reunion"), React.createElement("option", { value: "Romania" }, "Romania"), React.createElement("option", { value: "Russia" }, "Russia"), React.createElement("option", { value: "Rwanda" }, "Rwanda"), React.createElement("option", { value: "St Barthelemy" }, "St Barthelemy"), React.createElement("option", { value: "St Eustatius" }, "St Eustatius"), React.createElement("option", { value: "St Helena" }, "St Helena"), React.createElement("option", { value: "St Kitts-Nevis" }, "St Kitts-Nevis"), React.createElement("option", { value: "St Lucia" }, "St Lucia"), React.createElement("option", { value: "St Maarten" }, "St Maarten"), React.createElement("option", { value: "St Pierre & Miquelon" }, "St Pierre & Miquelon"), React.createElement("option", { value: "St Vincent & Grenadines" }, "St Vincent & Grenadines"), React.createElement("option", { value: "Saipan" }, "Saipan"), React.createElement("option", { value: "Samoa" }, "Samoa"), React.createElement("option", { value: "Samoa American" }, "Samoa American"), React.createElement("option", { value: "San Marino" }, "San Marino"), React.createElement("option", { value: "Sao Tome & Principe" }, "Sao Tome & Principe"), React.createElement("option", { value: "Saudi Arabia" }, "Saudi Arabia"), React.createElement("option", { value: "Senegal" }, "Senegal"), React.createElement("option", { value: "Seychelles" }, "Seychelles"), React.createElement("option", { value: "Sierra Leone" }, "Sierra Leone"), React.createElement("option", { value: "Singapore" }, "Singapore"), React.createElement("option", { value: "Slovakia" }, "Slovakia"), React.createElement("option", { value: "Slovenia" }, "Slovenia"), React.createElement("option", { value: "Solomon Islands" }, "Solomon Islands"), React.createElement("option", { value: "Somalia" }, "Somalia"), React.createElement("option", { value: "South Africa" }, "South Africa"), React.createElement("option", { value: "Spain" }, "Spain"), React.createElement("option", { value: "Sri Lanka" }, "Sri Lanka"), React.createElement("option", { value: "Sudan" }, "Sudan"), React.createElement("option", { value: "Suriname" }, "Suriname"), React.createElement("option", { value: "Swaziland" }, "Swaziland"), React.createElement("option", { value: "Sweden" }, "Sweden"), React.createElement("option", { value: "Switzerland" }, "Switzerland"), React.createElement("option", { value: "Syria" }, "Syria"), React.createElement("option", { value: "Tahiti" }, "Tahiti"), React.createElement("option", { value: "Taiwan" }, "Taiwan"), React.createElement("option", { value: "Tajikistan" }, "Tajikistan"), React.createElement("option", { value: "Tanzania" }, "Tanzania"), React.createElement("option", { value: "Thailand" }, "Thailand"), React.createElement("option", { value: "Togo" }, "Togo"), React.createElement("option", { value: "Tokelau" }, "Tokelau"), React.createElement("option", { value: "Tonga" }, "Tonga"), React.createElement("option", { value: "Trinidad & Tobago" }, "Trinidad & Tobago"), React.createElement("option", { value: "Tunisia" }, "Tunisia"), React.createElement("option", { value: "Turkey" }, "Turkey"), React.createElement("option", { value: "Turkmenistan" }, "Turkmenistan"), React.createElement("option", { value: "Turks & Caicos Is" }, "Turks & Caicos Is"), React.createElement("option", { value: "Tuvalu" }, "Tuvalu"), React.createElement("option", { value: "Uganda" }, "Uganda"), React.createElement("option", { value: "United Kingdom" }, "United Kingdom"), React.createElement("option", { value: "Ukraine" }, "Ukraine"), React.createElement("option", { value: "UAE" }, "United Arab Emirates"), React.createElement("option", { value: "USA" }, "United States of America"), React.createElement("option", { value: "Uraguay" }, "Uruguay"), React.createElement("option", { value: "Uzbekistan" }, "Uzbekistan"), React.createElement("option", { value: "Vanuatu" }, "Vanuatu"), React.createElement("option", { value: "Vatican City State" }, "Vatican City State"), React.createElement("option", { value: "Venezuela" }, "Venezuela"), React.createElement("option", { value: "Vietnam" }, "Vietnam"), React.createElement("option", { value: "Virgin Islands (Brit)" }, "Virgin Islands (Brit)"), React.createElement("option", { value: "Virgin Islands (USA)" }, "Virgin Islands (USA)"), React.createElement("option", { value: "Wake Island" }, "Wake Island"), React.createElement("option", { value: "Wallis & Futana Is" }, "Wallis & Futana Is"), React.createElement("option", { value: "Yemen" }, "Yemen"), React.createElement("option", { value: "Zaire" }, "Zaire"), React.createElement("option", { value: "Zambia" }, "Zambia"), React.createElement("option", { value: "Zimbabwe" }, "Zimbabwe")))), React.createElement("div", { className: "col-md-4" }, React.createElement("div", { className: "form-group" }, React.createElement("label", null, "State / Region"), this.renderStates())), React.createElement("div", { className: "col-md-4" }, React.createElement("div", { className: "form-group" }, React.createElement("label", null, "City / District / Area"), React.createElement("input", { type: "text", name: "city", className: "form-control", maxLength: "100", value: this.state.myself.city, onChange: this.handleChange, onBlur: this.saveData })))), React.createElement("div", { className: "form-row" }, React.createElement("div", { className: "col-md-12" }, React.createElement("label", { htmlFor: "visibilityselect" }, "Profile Visibility"), React.createElement("select", { className: "custom-select", id: "genderselect", name: "visibility", value: this.state.myself.visibility, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "0" }), React.createElement("option", { value: "1" }, "Public"), React.createElement("option", { value: "2" }, "Private")), React.createElement("small", { className: "form-text text-muted" }, "Optional, but recommended. Public visibility means your profile will be visible in searches. Private visibility means your profile will not be shown in searches.")))))), e) } return null } } class Meeting extends React.Component { constructor(e) { super(e), _defineProperty(this, "scrollToBottom", () => { void 0 !== this.messagesEnd && null !== this.messagesEnd && this.messagesEnd.scrollIntoView({ behavior: "smooth" }) }), _defineProperty(this, "handleDrag", e => { const t = document.querySelector("#myvideocont.smalldocked"), { clientX: a, clientY: n } = e, { left: i, top: l } = null !== t ? t.getBoundingClientRect() : { left: 0, top: 0 }, o = a - i, s = n - l; function r(e) { var a, n; a = e.pageX, n = e.pageY, null !== t && (t.style.left = a - o + "px", t.style.top = n - s + "px") } console.log("mousedown"), document.addEventListener("mousemove", r), document.body.addEventListener("mouseup", function e(t) { document.removeEventListener("mousemove", r), document.body.removeEventListener("mouseup", e) }) }); let t = !0; null == localStorage.getItem("token") && (t = !1), this.state = { joinmeeting: !1, redirectto: "", myname: "", textinput: "", messages: [], showinvite: !1, videoplaying: !1, audioplaying: !1, loading: !1, loggedin: t, bsstyle: "", message: "", id: null === this.props.meetingid ? "" : this.props.meetingid, token: null == localStorage.getItem("token") ? "" : localStorage.getItem("token"), dummydate: new Date, idvalid: !0, showchatlist: this.detectXtralargeScreen(), showalert: !this.detectXtralargeScreen() }, this.validateMeeting(this.state.token), this.beep = null, this.pulseInterval = null, this.aliveInterval = null, this.users = new Map, this.peers = new Map, this.myself = null, this.mystream = null, this.hubConnection = null, this.handleMessageSubmit = this.handleMessageSubmit.bind(this), this.handleChange = this.handleChange.bind(this), this.leaveMeeting = this.leaveMeeting.bind(this), this.getUserCam = this.getUserCam.bind(this), this.addMedia = this.addMedia.bind(this), this.newUserArrived = this.newUserArrived.bind(this), this.userSaidHello = this.userSaidHello.bind(this), this.sendPulse = this.sendPulse.bind(this), this.receivePulse = this.receivePulse.bind(this), this.collectDeadUsers = this.collectDeadUsers.bind(this), this.hasVideoAudioCapability = this.hasVideoAudioCapability.bind(this), this.createPeer = this.createPeer.bind(this), this.loginHandler = this.loginHandler.bind(this), this.handleMyName = this.handleMyName.bind(this), this.handleNameForm = this.handleNameForm.bind(this), this.handleJoinMeeting = this.handleJoinMeeting.bind(this), this.userMediaError = this.userMediaError.bind(this), this.inviteHandler = this.inviteHandler.bind(this), this.closeInviteModal = this.closeInviteModal.bind(this), this.handleVideoToggle = this.handleVideoToggle.bind(this), this.handleAudioToggle = this.handleAudioToggle.bind(this), this.onAlertDismiss = this.onAlertDismiss.bind(this), this.showChatList = this.showChatList.bind(this), this.hideChatList = this.hideChatList.bind(this), this.onPeerStream = this.onPeerStream.bind(this) } validateMeeting(e) { void 0 === this.state.id || null === this.state.id ? this.setState({ idvalid: !1 }) : fetch("/api/Meetings/" + this.state.id, { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 200 === e.status ? e.json().then(e => { let t = this.state.messages; if (null !== e.purpose && "" !== e.purpose) { var a = new MessageInfo; a.sender = null, a.text = e.purpose, a.type = MessageEnum.Text, a.timeStamp = new Date, t.push(a) } this.setState({ idvalid: !0, loading: !1, messages: t }), null !== e.name && "" !== e.name && (document.title = e.name) }) : this.setState({ idvalid: !1 }) }) } closeInviteModal() { this.setState({ showinvite: !1 }) } inviteHandler() { this.setState({ showinvite: !0 }) } handleVideoToggle(e) { null !== this.mystream ? this.mystream.getVideoTracks().length > 0 && (this.mystream.getVideoTracks()[0].enabled = !this.state.videoplaying, this.setState({ videoplaying: !this.state.videoplaying })) : (this.getUserCam(), this.setState({ videoplaying: !0 })) } handleAudioToggle(e) { null !== this.mystream ? this.mystream.getAudioTracks().length > 0 && (this.mystream.getAudioTracks()[0].enabled = !this.state.audioplaying, this.setState({ audioplaying: !this.state.audioplaying })) : (this.getUserCam(), this.setState({ audioplaying: !0 })) } handleMyName(e) { this.setState({ myname: e.target.value }) } loginHandler() { null != localStorage.getItem("token") && this.validate(localStorage.getItem("token")) } handleChange(e) { switch (e.target.name) { case "textinput": this.setState({ textinput: e.target.value }) } } handleNameForm(e) { e.preventDefault(), this.myself.name = this.state.myname, this.setState({ joinmeeting: !0 }, () => { this.startHub() }) } handleJoinMeeting(e) { this.setState({ joinmeeting: !0 }) } handleMessageSubmit(e) { e.preventDefault(), this.sendTextMessage() } onAlertDismiss() { this.setState({ showalert: !1 }) } showChatList(e) { e.preventDefault(), this.setState({ showchatlist: !0, showalert: !1 }) } hideChatList(e) { e.preventDefault(), this.setState({ showchatlist: !1 }) } hasVideoAudioCapability() { return !(!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) } validate(e) { this.setState({ loading: !0 }), fetch("/api/Members/Validate", { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.myself = new UserInfo, this.myself.name = "", this.myself.videoCapable = this.hasVideoAudioCapability() && !this.detectEdgeorIE() && !this.detectMobileorTablet(), this.myself.peerCapable = SimplePeer.WEBRTC_SUPPORT && !this.detectEdgeorIE() && !this.detectMobileorTablet(), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status && e.json().then(e => { this.myself = new UserInfo, this.myself.memberID = e.id, this.myself.name = e.name, this.myself.videoCapable = this.hasVideoAudioCapability() && !this.detectEdgeorIE() && !this.detectMobileorTablet(), this.myself.peerCapable = SimplePeer.WEBRTC_SUPPORT && !this.detectEdgeorIE() && !this.detectMobileorTablet(), this.myself.pic = e.pic, this.setState({ loggedin: !0, loading: !1, joinmeeting: !1 }, () => { this.startHub() }) }) }) } startHub() { this.hubConnection = (new signalR.HubConnectionBuilder).withUrl("/meetinghub", { accessTokenFactory: () => this.state.token }).build(), this.hubConnection.start().then(() => { console.log("Hub Connection started!"), this.hubConnection.invoke("JoinMeeting", this.state.id, this.myself.name).catch(e => console.error(e)), this.pulseInterval = setInterval(this.sendPulse, 3e3) }).catch(e => console.log("Error while establishing connection :(")), this.hubConnection.on("NewUserArrived", e => { this.newUserArrived(e) }), this.hubConnection.on("UpdateUser", e => { this.updateUser(e) }), this.hubConnection.on("UserLeft", e => { this.userLeft(e) }), this.hubConnection.on("UserSaidHello", e => { this.userSaidHello(e) }), this.hubConnection.on("SetMySelf", e => { this.setMySelf(e) }), this.hubConnection.on("ReceiveTextMessage", (e, t, a) => { this.receiveTextMessage(e, t, a) }), this.hubConnection.on("ReceiveSignal", (e, t) => { console.log("receivesignal sender : " + e), console.log("receivesignal data : " + t), void 0 !== this.peers.get(e.connectionID) && this.peers.get(e.connectionID).signal(t) }), this.hubConnection.on("ReceivePulse", e => { this.receivePulse(e) }) } receivePulse(e) { void 0 !== this.users.get(e) && (this.users.get(e).lastpulse = Date.now()) } collectDeadUsers() { for (const [e, t] of this.users.entries()) if (!t.isAlive()) { null !== this.peers.get(t.connectionID) && (console.log(t.connectionID + " peer about to be destoryed"), void 0 !== this.peers.get(t.connectionID) && null !== this.peers.get(t.connectionID) && (this.peers.get(t.connectionID).destroy(), this.peers.delete(t.connectionID))); let e = new MessageInfo; e.sender = null, e.text = t.name + " has left the meeting.", e.type = MessageEnum.MemberLeave; let a = this.state.messages; a.push(e), this.users.delete(t.connectionID), this.setState({ messages: a, showalert: !this.state.showchatlist }), this.playmsgbeep() } } setMySelf(e) { this.myself.connectionID = e.connectionID, this.myself.videoCapable = this.hasVideoAudioCapability(), this.myself.peerCapable = SimplePeer.WEBRTC_SUPPORT, (this.detectEdgeorIE() || this.detectMobileorTablet()) && (this.myself.videoCapable = !1, this.myself.peerCapable = !1), this.hubConnection.invoke("NotifyPresence", this.state.id, this.myself).catch(e => console.error(e)), this.myself.videoCapable } sendPulse() { console.log("SendPulse Hubconnection State:" + this.hubConnection.connectionState), 1 === this.hubConnection.connectionState && this.hubConnection.invoke("SendPulse", this.state.id).catch(e => console.error("sendPulse " + e)) } createPeer(e, t) { console.log("newuserarrived stream : "), console.log(this.mystream); let a = new SimplePeer({ initiator: e, config: { iceServers: [{ urls: "stun:stun.services.mozilla.com" }, { urls: "stun:stun.l.google.com:19302" }] }, stream: this.mystream }); a.cid = t.connectionID, a.hubConnection = this.hubConnection, a.myself = this.myself, a.meetingid = this.state.id, a.on("error", this.onPeerError), a.on("signal", this.onPeerSignal), a.on("connect", this.onPeerConnect), a.on("stream", e => { this.onPeerStream(e, a.cid) }), a.on("data", e => { console.log("got a message from peer1: " + e) }), this.peers.set(t.connectionID, a) } onPeerSignal(e) { this.hubConnection.invoke("SendSignal", e, this.cid, this.myself, this.meetingid).catch(e => console.error("SendSignal " + e)) } onPeerConnect() { this.send(this.myself.name + " peer connected.") } onPeerError(e) { console.log(this.cid + " peer gave error. "), console.error(e) } onPeerStream(e, t) { console.log("received a stream"), console.log(e), void 0 !== this.users.get(t) && (this.users.get(t).stream = e, this.setState({ dummydate: Date.now() }, () => { this.users.forEach(function (e, t) { let a = document.getElementById("video" + e.connectionID); null !== a && ("srcObject" in a ? a.srcObject = e.stream : a.src = window.URL.createObjectURL(e.stream), a.muted = !1, a.volume = .8, a.play()) }) })) } newUserArrived(e) { let t = new UserInfo; t.connectionID = e.connectionID, t.memberID = e.memberID, t.name = e.name, t.pic = e.pic, t.videoCapable = e.videoCapable, t.peerCapable = e.peerCapable, this.users.set(e.connectionID, t); let a = new MessageInfo; a.sender = null, a.text = t.name + " has joined the meeting.", t.videoCapable || t.peerCapable || (a.text = a.text + " No Video/Audio Capability."), a.type = MessageEnum.MemberAdd; let n = this.state.messages; if (n.push(a), this.setState({ messages: n, showalert: !this.state.showchatlist }), this.playjoinbeep(), this.hubConnection.invoke("HelloUser", this.state.id, this.myself, e.connectionID).catch(e => { console.log("Unable to say hello to new user."), console.error(e) }), this.myself.peerCapable && t.peerCapable) try { this.createPeer(!0, e) } catch (e) { console.log("Unable to create a new peer when newuserarrived"), this.myself.peerCapable = !1, this.hubConnection.invoke("UpdateUser", this.state.id, this.myself) } } sendTextMessage() { "" !== this.state.textinput.trim() && (this.hubConnection.invoke("SendTextMessage", this.state.id, this.myself, this.state.textinput).catch(e => { console.log("Unable to send message to group."), console.error(e) }), this.setState({ textinput: "" })) } receiveTextMessage(e, t, a) { var n = new MessageInfo; n.sender = e, n.text = t, n.type = MessageEnum.Text, n.timeStamp = a; let i = this.state.messages; i.push(n), this.setState({ messages: i, showalert: !this.state.showchatlist }), this.playmsgbeep() } userLeft(e) { var t = this.users.get(e); let a = new MessageInfo; a.sender = null, a.text = t.name + " has left.", a.type = MessageEnum.MemberLeave; let n = this.state.messages; n.push(a), this.users.delete(e), null === this.peers.get(e) && void 0 === this.peers.get(e) || this.peers.get(e).destroy(), this.peers.delete(e), this.setState({ messages: n, showalert: !this.state.showchatlist }), this.playleftbeep() } updateUser(e) { if (void 0 !== this.users.get(e.connectionID)) { var t = this.users.get(e.connectionID).name; if (t !== e.name) { this.users.get(e.connectionID).name = e.name; var a = new MessageInfo; a.sender = null, a.text = t + " has changed name to " + e.name + ".", a.type = MessageEnum.Text; var n = this.state.messages; n.push(a), this.setState({ messages: n, showalert: !this.state.showchatlist }), this.playjoinbeep() } let i = !1; this.users.get(e.connectionID).videoCapable !== e.videoCapable && (this.users.get(e.connectionID).videoCapable = e.videoCapable, i = !0), this.users.get(e.connectionID).peerCapable !== e.peerCapable && (this.users.get(e.connectionID).peerCapable = e.peerCapable, i = !0), i && (this.setState({ dummydate: new Date }), this.playjoinbeep()) } } userSaidHello(e) { let t = new UserInfo; t.connectionID = e.connectionID, t.memberID = e.memberID, t.name = e.name, t.pic = e.pic, this.users.set(e.connectionID, t); var a = new MessageInfo; a.sender = null, a.text = e.name + " is here.", t.videoCapable || t.peerCapable || (a.text = a.text + " No Video/Audio Capability."), a.type = MessageEnum.Text; let n = this.state.messages; if (n.push(a), this.setState({ messages: n, showalert: !this.state.showchatlist }), this.playmsgbeep(), this.myself.peerCapable && t.peerCapable) try { this.createPeer(!1, e) } catch (e) { console.log("Unable to create a new peer when userSaidHello"), this.myself.peerCapable = !1, this.hubConnection.invoke("UpdateUser", this.state.id, this.myself) } } leaveMeeting() { this.hubConnection.invoke("LeaveMeeting", this.state.id).catch(e => console.error(e)); try { if (null !== this.mystream) for (var e = 0; e < this.mystream.getTracks().length; e++)this.mystream.getTracks()[e].stop() } catch (e) { console.log("Error while stoping video and audio."), console.error(e) } for (const [e, t] of this.users.entries()) try { null !== this.peers.get(t.connectionID) && void 0 !== this.peers.get(t.connectionID) && null !== this.peers.get(t.connectionID) && (this.peers.get(t.connectionID).destroy(), this.peers.delete(t.connectionID)), this.users.delete(t.connectionID) } catch (e) { console.log("Error while deleting peer and deleting user"), console.error(e) } this.setState({ redirectto: "/" }) } detectEdgeorIE() { const e = !!document.documentMode, t = !e && !!window.StyleMedia; return e || t } detectMobileorTablet() { let e = !1; var t; return t = navigator.userAgent || navigator.vendor || window.opera, (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4))) && (e = !0), !1 } detectXtralargeScreen() { return window.matchMedia("(min-width: 1200px)").matches } getUserCam() { var e = !0; window.matchMedia("(max-width: 414px) and (orientation: portrait)").matches && (e = { width: { min: 375 }, height: { min: 740 } }); var t = { audio: !0, video: e }; navigator.mediaDevices.getUserMedia && navigator.mediaDevices.getUserMedia(t).then(this.addMedia).catch(this.userMediaError) } addMedia(e) { this.mystream = e, this.setState({ dummydate: new Date }, () => { var e = document.getElementById("myvideo"); e.srcObject = this.mystream, e.onloadedmetadata = function (t) { void 0 !== e && (e.volume = 0, e.muted = 0, e.play(), console.log(e.width + " " + e.height)) } }); for (var t = 0; t < document.getElementsByClassName("sample").length; t++)document.getElementsByClassName("sample")[t].srcObject = this.mystream; this.mystream.getVideoTracks().length > 0 && (this.mystream.getVideoTracks()[0].enabled = this.state.videoplaying), this.mystream.getAudioTracks().length > 0 && (this.mystream.getAudioTracks()[0].enabled = this.state.audioplaying), this.myself.videoCapable = !0; for (const [e, t] of this.peers) t.addStream(this.mystream) } userMediaError(e) { console.log("Unable to access user media"), console.error(e), void 0 !== e.name && null !== e.name && ("notallowederror" === e.name.toLowerCase() ? alert("You have specifically denied access to camera and microphone. Please check browser title or address bar to see the notification.") : alert("Unable to access camera.")), this.setState({ videoplaying: !1, audioplaying: !1 }) } playmsgbeep() { let e = document.getElementById("chatbeep"); null != e && (e.currentTime = 0, e.volume = .15, e.muted = !1, e.play()) } playjoinbeep() { let e = document.getElementById("joinedbeep"); null != e && (e.currentTime = 0, e.volume = .15, e.muted = !1, e.play()) } playleftbeep() { let e = document.getElementById("userleftbeep"); null != e && (e.currentTime = 0, e.volume = .15, e.muted = !1, e.play()) } componentDidMount() { this.validate(this.state.token), this.aliveInterval = setInterval(this.collectDeadUsers, 5e3), this.scrollToBottom() } componentWillUnmount() { null !== this.aliveInterval && clearInterval(this.aliveInterval), null !== this.pulseInterval && clearInterval(this.pulseInterval) } componentDidUpdate() { this.scrollToBottom() } renderJoinMeetingModal() { return React.createElement(React.Fragment, null, React.createElement(NavMenu, { onLogin: this.loginHandler, onInvite: this.inviteHandler }), React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("div", { className: "text-center" }, React.createElement("button", { type: "button", className: "btn btn-primary btn-lg", onClick: this.handleJoinMeeting }, "Join Meeting"))))))) } renderValidateModal() { return React.createElement(React.Fragment, null, React.createElement(NavMenu, { onLogin: this.loginHandler, onInvite: this.inviteHandler }), React.createElement("div", { className: "container-fluid" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-12" }, React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("p", { className: "m-2" }, "This meeting id cannot be found. Please recheck with the meeting organizer."), React.createElement("p", { className: "m-2" }, "Alternatively you can organize your own meeting. ", React.createElement(Link, { to: "/meetings" }, "Organize a Meeting")))))))))) } renderInviteModal() { return React.createElement("div", { className: "container" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-12" }, React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Send Meeting Invites"), React.createElement("button", { type: "button", className: "close", "data-dismiss": "modal", "aria-label": "Close", onClick: this.closeInviteModal }, React.createElement("span", { "aria-hidden": "true" }, "×"))), React.createElement("div", { className: "modal-body" }, React.createElement("p", { className: "mt-10" }, "You can share this URL with anyone who wants to join the meeting."), React.createElement("input", { type: "text", value: window.location.href, autoFocus: "on", className: "form-control" }), React.createElement("p", { className: "mb-10" })))))))) } renderNameForm() { let e = this.detectEdgeorIE() ? React.createElement("p", null, "You are using either EDGE or INTERNET EXPLORER. Your access is ", React.createElement("strong", null, "restricted"), " to text chat only. You will have full feature access on ", React.createElement("strong", null, "chrome, firefox or safari"), ".") : null, t = this.detectMobileorTablet() ? React.createElement("p", null, "You can join meeting on Mobile and Tablet device in ", React.createElement("strong", null, "Text Chat"), " mode only. Please open the meeting link in a laptop or desktop computer or other bigger screen device.") : null; return React.createElement("div", { className: "container" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-12" }, React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, e, t, React.createElement("form", { onSubmit: this.handleNameForm }, React.createElement("input", { type: "text", required: !0, value: this.state.myname, autoFocus: "on", className: "form-control", maxLength: "20", onChange: this.handleMyName, placeholder: "Your Name Here" }), React.createElement("br", null), React.createElement("button", { type: "submit", className: "btn btn-primary" }, "Join Meeting"))))))))) } renderMessageList(e) { let t = React.createElement(React.Fragment, null); const a = []; for (var n in this.state.messages) { let e = this.state.messages[n]; if (null === e.sender) a.push(React.createElement("li", { className: "notify", key: n }, React.createElement("span", null, e.text))); else if (e.sender.connectionID === this.myself.connectionID) a.push(React.createElement("li", { className: "sent", key: n }, React.createElement("span", null, e.text, React.createElement("small", { className: "time" }, moment(e.timeStamp, "YYYYMMDD").fromNow())))); else { let t = "" !== e.sender.pic ? React.createElement("img", { src: e.sender.pic, width: "20", height: "20", className: "rounded img-fluid" }) : null; a.push(React.createElement("li", { className: "receive", key: n }, React.createElement("span", null, React.createElement("small", { className: "name" }, t, " ", e.sender.name, " says"), e.text, React.createElement("small", { className: "time" }, moment(e.timeStamp, "YYYYMMDD").fromNow())))) } } if (this.state.showalert && this.state.messages.length > 0) if (null === this.state.messages[this.state.messages.length - 1].sender) t = this.state.showalert ? React.createElement("div", { className: "alert alert-light meetingalert", role: "alert" }, this.state.messages[this.state.messages.length - 1].text) : null; else { let e = "" !== this.state.messages[this.state.messages.length - 1].sender.pic ? React.createElement("img", { src: this.state.messages[this.state.messages.length - 1].sender.pic, width: "20", height: "20", className: "rounded img-fluid" }) : null; t = this.state.showalert ? React.createElement("div", { className: "alert alert-light meetingalert", role: "alert" }, e, " ", this.state.messages[this.state.messages.length - 1].sender.name, " sent a message. ", React.createElement("a", { href: "#", className: "alert-link", onClick: this.showChatList }, "See Here"), React.createElement("button", { type: "button", class: "close", "data-dismiss": "alert", "aria-label": "Close", onClick: this.onAlertDismiss }, React.createElement("span", { "aria-hidden": "true" }, "×"))) : null } let i = "col-md-12"; return this.detectEdgeorIE() ? i = "col-md-12" : e && (i = "col-xl-3"), this.state.showchatlist ? React.createElement(React.Fragment, null, t, React.createElement("div", { id: "msgcont", className: i }, React.createElement("p", { className: "h5 text-left pl-1" }, "Chat ", React.createElement("button", { onClick: this.hideChatList, type: "button", className: "btn btn-sm float-right btn-dark rounded-0" }, "Close")), React.createElement("ul", { id: "msglist", className: "pt-1" }, a, React.createElement("li", { style: { float: "left", clear: "both" }, ref: e => { this.messagesEnd = e } })))) : React.createElement(React.Fragment, null, t) } renderVideoTags() { let e = ""; const t = []; let a = ""; this.users.forEach(function (e, a) { if (null !== e.stream) { let n = "" !== e.pic ? React.createElement("img", { src: e.pic, width: "20", height: "20", className: "rounded ml-1 mb-1 mt-1" }) : null; t.push(React.createElement("li", { className: "video", key: a }, React.createElement("video", { id: "video" + e.connectionID, autoPlay: !0, playsInline: !0, muted: "muted", volume: "0" }), React.createElement("span", { className: "ctrl" }, n, " ", React.createElement("span", { className: "name p-1" }, e.name)))) } }), e = t.length < 13 ? "video" + t.length : "video13", a = 0 === t.length ? "full" : "smalldocked"; const n = 0 === t.length ? { left: 0, top: 0 } : {}; let i = null !== this.mystream ? React.createElement("div", { className: a, id: "myvideocont", style: n }, React.createElement("video", { id: "myvideo", muted: "muted", volume: "0", playsInline: !0, onMouseDown: this.handleDrag })) : null; return t.length > 0 || null !== this.mystream ? React.createElement("div", { className: "col-lg-12 col-xl-9 meetingvideocol" }, React.createElement("div", { id: "videocont" }, i, React.createElement("ul", { id: "videolist", className: e }, t))) : null } render() { if (this.state.idvalid) { if (null !== this.myself && "" === this.myself.name.trim()) return React.createElement(React.Fragment, null, this.renderNameForm(), React.createElement(HeartBeat, { activity: "2", interval: "3000" })); if (this.state.joinmeeting) { if (this.state.joinmeeting) { let e = "" !== this.state.message ? React.createElement("div", { className: "fixedBottom " }, React.createElement(MessageStrip, { message: this.state.message, bsstyle: this.state.bsstyle })) : null, t = this.state.showinvite ? this.renderInviteModal() : null, a = this.renderVideoTags(), n = this.renderMessageList(null != a), i = this.state.videoplaying ? React.createElement("button", { type: "button", className: "btn btn-primary mr-1 ml-2 videoctrl", onClick: this.handleVideoToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/video.svg", alt: "", width: "24", height: "24", title: "Video On" })) : React.createElement("button", { type: "button", className: "btn btn-light mr-1 ml-2 videoctrl", onClick: this.handleVideoToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/video-off.svg", alt: "", width: "24", height: "24", title: "Video Off" })), l = this.state.audioplaying ? React.createElement("button", { type: "button", className: "btn btn-primary mr-1 audioctrl", onClick: this.handleAudioToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/mic.svg", alt: "", width: "24", height: "24", title: "Microphone On" })) : React.createElement("button", { type: "button", className: "btn btn-light mr-1 audioctrl", onClick: this.handleAudioToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/mic-off.svg", alt: "", width: "24", height: "24", title: "Microphone Off" })); return this.detectEdgeorIE() && (l = null, i = null), React.createElement(React.Fragment, null, React.createElement(NavMenu, { onLogin: this.loginHandler, onInvite: this.inviteHandler, onLeaveMeeting: this.leaveMeeting, fixed: !0 }), React.createElement("div", { className: "container-fluid" }, React.createElement("div", { className: "row" }, a, n), e, t, React.createElement("audio", { id: "chatbeep", muted: "muted", volume: "0" }, React.createElement("source", { src: "/media/swiftly.mp3" }), React.createElement("source", { src: "/media/swiftly.m4r" }), React.createElement("source", { src: "/media/swiftly.ogg" })), React.createElement("audio", { id: "joinedbeep", muted: "muted", volume: "0" }, React.createElement("source", { src: "/media/got-it-done.mp3" }), React.createElement("source", { src: "/media/got-it-done.m4r" }), React.createElement("source", { src: "/media/got-it-done.ogg" })), React.createElement("audio", { id: "userleftbeep", muted: "muted", volume: "0" }, React.createElement("source", { src: "/media/get-outta-here.mp3" }), React.createElement("source", { src: "/media/get-outta-here.m4r" }), React.createElement("source", { src: "/media/get-outta-here.ogg" }))), React.createElement("footer", { className: "footer fixed-bottom py-2" }, React.createElement("form", { className: "form-inline", onSubmit: this.handleMessageSubmit }, React.createElement("div", { className: "container-fluid" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-sm-8 col-lg-10" }, React.createElement("input", { type: "text", placeholder: "Type a text message...", name: "textinput", value: this.state.textinput, autoComplete: "off", autoCorrect: "On", autoFocus: "On", onChange: this.handleChange, className: "form-control form-control-sm mb-1", id: "msginput" })), React.createElement("div", { className: "col-sm-4 col-lg-2 text-center" }, React.createElement("button", { type: "submit", id: "msgsubmit", className: "btn btn-primary", title: "Send Message" }, React.createElement("img", { src: "/icons/send.svg", alt: "", width: "24", height: "24", title: "Send Message" })), i, l, React.createElement("button", { type: "button", className: "btn btn-primary d-xl-none", title: "Show Chat Window", onClick: this.showChatList }, React.createElement("img", { src: "/icons/message-square.svg", alt: "", width: "24", height: "24", title: "Chat Window" }))))))), React.createElement(HeartBeat, { activity: "2", interval: "3000" })) } return null } return React.createElement(React.Fragment, null, this.renderJoinMeetingModal(), React.createElement(HeartBeat, { activity: "2", interval: "3000" })) } return React.createElement(React.Fragment, null, " ", this.renderValidateModal(), React.createElement(HeartBeat, { activity: "2", interval: "3000" })) } } class Meetings extends React.Component { constructor(e) { super(e); let t = !0; null == localStorage.getItem("token") && (t = !1), this.state = { loading: !1, loggedin: t, bsstyle: "", message: "", meetingid: "", name: "", purpose: "" }, this.loginHandler = this.loginHandler.bind(this), this.handleStartMeeting = this.handleStartMeeting.bind(this), this.handleChange = this.handleChange.bind(this) } loginHandler() { null != localStorage.getItem("token") && this.setState({ loggedin: !0 }) } handleStartMeeting(e) { e.preventDefault(), fetch("api/Meetings", { method: "post", body: JSON.stringify({ Name: this.state.name, Purpose: this.state.purpose }), headers: { Authorization: "Bearer " + localStorage.getItem("token"), "Content-Type": "application/json" } }).then(e => { this.setState({ loading: !1 }), 200 === e.status ? e.json().then(e => { console.log(e), window.location.href = "/m/" + e.id }) : this.setState({ bsstyle: "danger", message: "Unable to create a meeting. Please try again." }) }) } handleChange(e) { switch (e.target.name) { case "name": this.setState({ name: e.target.value }); break; case "purpose": this.setState({ purpose: e.target.value }) } } render() { let e = this.state.loading ? React.createElement("div", null, " ", React.createElement(Progress, { animated: !0, color: "info", value: "100", className: "loaderheight" }), " ") : null; if (this.state.loggedin) { let t = "" !== this.state.message ? React.createElement("div", { className: "fixedBottom " }, React.createElement(MessageStrip, { message: this.state.message, bsstyle: this.state.bsstyle })) : null; return React.createElement("div", null, React.createElement(NavMenu, { onLogin: this.loginHandler, registerFormBeginWith: !1, register: !this.state.loggedin, fixed: !1 }), React.createElement("main", { role: "main", className: "inner cover meetingsmain mr-5 ml-5" }, React.createElement("h1", { className: "cover-heading" }, "Online Meetings"), React.createElement("p", { className: "lead" }, "Online meetings are the need of the hour. Connect with people for quick status updates, important discussions, future planning or interviews. Salient Features-"), React.createElement("ul", null, React.createElement("li", null, "Text, Audio and Video Chat Enabled"), React.createElement("li", null, "No need to install any special software, works on chrome, mozilla, safari and edge."), React.createElement("li", null, "Peer to Peer technlogy"), React.createElement("li", null, "Secured with SSL"), React.createElement("li", null, "Free to use")), React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-6" }, React.createElement("form", { onSubmit: this.handleStartMeeting }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "meetingnametxt" }, "Name"), React.createElement("input", { type: "text", className: "form-control", id: "meetingnametxt", placeholder: "Friendly name of your meeting", name: "name", maxLength: "50", onChange: this.handleChange })), React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "purposetxt" }, "Purpose"), React.createElement("input", { type: "text", className: "form-control", id: "purposetxt", placeholder: "What is the agenda of the meeting", maxLength: "250", name: "purpose", onChange: this.handleChange })), React.createElement("h1", null, React.createElement("button", { type: "submit", className: "btn btn-primary my-2 startmeeting" }, "Create a Meeting")))))), React.createElement(HeartBeat, { activity: "1", interval: "10000" }), e, t) } return React.createElement("div", null, React.createElement(NavMenu, { onLogin: this.loginHandler, registerFormBeginWith: !1, register: !this.state.loggedin, fixed: !1 }), React.createElement("main", { role: "main", className: "inner cover meetingsmain mr-5 ml-5" }, React.createElement("h1", { className: "cover-heading" }, "Online Meetings"), React.createElement("p", { className: "lead" }, "Online meetings are the need of the hour. Connect with people for quick status updates, important discussions, future planning or interviews. Salient Features-"), React.createElement("ul", null, React.createElement("li", null, "Text, Audio and Video Chat Enabled"), React.createElement("li", null, "No need to install any special software, works on chrome, mozilla, safari and edge."), React.createElement("li", null, "Peer to Peer technlogy"), React.createElement("li", null, "Secured with SSL"), React.createElement("li", null, "Free to use")), React.createElement("p", { className: "lead" }, React.createElement("button", { type: "button", className: "btn btn-lg btn-secondary" }, "Login to start a Meeting"))), React.createElement(HeartBeat, { activity: "1", interval: "20000" })) } } class MessageStrip extends React.Component { constructor(e) { super(e), this.state = { bsstyle: void 0 !== this.props.bsstyle ? this.props.bsstyle : "", message: void 0 !== this.props.message ? this.props.message : "" } } static getDerivedStateFromProps(e, t) { return e.message !== t.message ? { message: e.message, bsstyle: e.bsstyle } : null } render() { return "" !== this.state.message ? React.createElement("div", { className: "noMargin noRadius alert alert-" + this.state.bsstyle, role: "alert" }, this.state.message) : null } } class RegisterForm extends React.Component { constructor(e) { super(e); let t = !0; null == localStorage.getItem("token") && (t = !1), this.state = { showregisterform: e.beginWithRegister, GenerateOTPButton: !0, loginemail: "", OTP: "", registername: "", registeremail: "", loading: !1, message: "", bsstyle: "", loggedin: t }, this.handleChange = this.handleChange.bind(this), this.handleGenerateOTP = this.handleGenerateOTP.bind(this), this.handleRegisterSubmit = this.handleRegisterSubmit.bind(this), this.handleLogin = this.handleLogin.bind(this), this.handleRegisterClickHere = this.handleRegisterClickHere.bind(this), this.handleLoginClickHere = this.handleLoginClickHere.bind(this) } handleChange(e) { switch (e.target.name) { case "loginemail": this.setState({ loginemail: e.target.value }); break; case "OTP": this.setState({ OTP: e.target.value }); break; case "registeremail": this.setState({ registeremail: e.target.value }); break; case "registername": this.setState({ registername: e.target.value }) } } handleLogin(e) { e.preventDefault(), this.setState({ loading: !0 }), fetch("api/Members/Login", { method: "post", body: JSON.stringify({ ID: this.state.loginemail, Passcode: this.state.OTP }), headers: { "Content-Type": "application/json" } }).then(e => { 200 === e.status ? e.json().then(e => { void 0 !== e.token && (localStorage.setItem("token", e.token), this.setState({ bsstyle: "", message: "", loggedin: !0 }), void 0 !== this.props.onLogin ? this.props.onLogin() : this.setState({ redirectto: "/" })) }) : 404 === e.status && e.json().then(e => { this.setState({ bsstyle: "warning", message: e.error, loading: !1 }) }) }) } handleGenerateOTP(e) { e.preventDefault(), this.setState({ loading: !0 }), fetch("api/Members/OTP?id=" + this.state.loginemail, { method: "get", headers: { "Content-Type": "application/json" } }).then(e => { 200 === e.status ? this.setState({ GenerateOTPButton: !1, loading: !1, bsstyle: "success", message: "An OTP has been sent to your email address. Please verify and login." }) : this.setState({ bsstyle: "warning", message: "Email is not registered with us.", loading: !1 }) }) } handleRegisterSubmit(e) { return e.preventDefault(), this.setState({ loading: !0 }), fetch("api/Members", { method: "post", body: JSON.stringify({ Name: this.state.registername, Email: this.state.registeremail, Phone: "", CountryCode: "" }), headers: { "Content-Type": "application/json" } }).then(e => { console.log(e.status), 200 === e.status ? this.setState({ loading: !1, bsstyle: "success", message: "Your registration is complete, an OTP has been sent to your email address. Please verify and login. Please do check spam folder of your email.", loggedin: !1, loginemail: this.state.registeremail, showregisterform: !1 }) : 400 === e.status ? e.json().then(e => { this.setState({ loading: !1, bsstyle: "warning", message: e.Error[0] }) }) : this.setState({ loading: !1, bsstyle: "warning", message: "Unable to process your request please try again." }) }), !1 } handleRegisterClickHere() { this.setState({ showregisterform: !0 }) } handleLoginClickHere() { this.setState({ showregisterform: !1 }) } renderOTPForm() { return React.createElement("form", { autoComplete: "off", onSubmit: this.handleGenerateOTP }, React.createElement("div", { className: "form-group" }, React.createElement("label", null, "Email"), React.createElement("input", { type: "email", className: "form-control", required: !0, name: "loginemail", value: this.state.loginemail, onChange: this.handleChange, placeholder: "Your email" })), React.createElement("button", { className: "btn btn-primary", type: "submit" }, "Generate OTP")) } renderLoginForm() { return React.createElement("form", { onSubmit: this.handleLogin }, React.createElement("div", { className: "form-group" }, React.createElement("label", null, "Email"), React.createElement("input", { type: "email", className: "form-control", required: !0, name: "loginemail", value: this.state.loginemail, onChange: this.handleChange, placeholder: "Registered email" })), React.createElement("div", { className: "form-group" }, React.createElement("label", null, "OTP"), React.createElement("input", { className: "form-control", required: !0, name: "OTP", type: "password", onChange: this.handleChange })), React.createElement("button", { className: "btn btn-primary", type: "submit" }, "Verify")) } static getDerivedStateFromProps(e, t) { return e.beginWithRegister !== t.beginWithRegister ? { someState: e.beginWithRegister } : null } render() { let e = this.state.loading ? React.createElement("div", null, " Loading... ") : null, t = "" !== this.state.message ? React.createElement("div", { color: this.state.bsstyle, className: "mt-1" }, this.state.message) : null, a = this.state.GenerateOTPButton ? this.renderOTPForm() : this.renderLoginForm(), n = this.state.showregisterform ? React.createElement("div", null, React.createElement("h3", null, "Register"), React.createElement("div", null, React.createElement("form", { autoComplete: "off", onSubmit: this.handleRegisterSubmit }, React.createElement("div", { className: "form-group" }, React.createElement("label", null, "Your Name"), React.createElement("input", { type: "text", className: "form-control", required: !0, name: "registername", value: this.state.registername, onChange: this.handleChange })), React.createElement("div", { className: "form-group" }, React.createElement("label", null, "Your Email"), React.createElement("input", { type: "email", className: "form-control", required: !0, name: "registeremail", value: this.state.registeremail, onChange: this.handleChange, placeholder: "me@bolo.com" }), React.createElement("small", { className: "form-text text-muted" }, "We'll never share your email with anyone else.")), React.createElement("button", { className: "btn btn-primary", type: "submit" }, "Submit")), React.createElement("p", { className: "text-center mt-2" }, "Already a Member! ", React.createElement("button", { type: "button", onClick: this.handleLoginClickHere, className: "btn btn-success btn-sm" }, "Login Here"), " "), t, e)) : React.createElement("div", null, React.createElement("h3", null, "Login"), React.createElement("div", null, a, React.createElement("p", { className: "text-center mt-2" }, "Register for FREE ", React.createElement("button", { type: "button", onClick: this.handleRegisterClickHere, className: "btn btn-success btn-sm" }, "Click Here")), t, e)); return React.createElement("div", null, n) } }